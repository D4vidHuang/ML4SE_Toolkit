from RRD.railroad import Diagram, Sequence, Choice, Terminal, NonTerminal, ZeroOrMore, OneOrMore, Optional, Skip

# Diagram for production: externals
externals_diagram = Diagram('externals', Sequence(ZeroOrMore(Sequence(NonTerminal('multiComment'), NonTerminal('_automaticSemicolon'), NonTerminal('val'), NonTerminal('var'), NonTerminal('def1'), NonTerminal('interpStart'), NonTerminal('openMultiComment'), NonTerminal('empty'), NonTerminal('trailingComma'))), NonTerminal('extras'), ZeroOrMore(Sequence(NonTerminal('whiteSpace'), NonTerminal('comment'))), NonTerminal('word'), NonTerminal('identifier'), NonTerminal('conflicts'), ZeroOrMore(Sequence(ZeroOrMore(NonTerminal('SimpleExpr')), ZeroOrMore(Sequence(NonTerminal('Def'), NonTerminal('EarlyDef'))), ZeroOrMore(Sequence(NonTerminal('Path'), NonTerminal('SimpleType'))), ZeroOrMore(Sequence(NonTerminal('Path'), NonTerminal('ImportExpr'))), ZeroOrMore(Sequence(NonTerminal('Path'), NonTerminal('SelfType'))), ZeroOrMore(NonTerminal('IfExpression')), ZeroOrMore(Sequence(NonTerminal('SimpleExpr1'), NonTerminal('Binding'))), ZeroOrMore(Sequence(NonTerminal('SimpleExpr1'), NonTerminal('SimpleExpr'))), ZeroOrMore(Sequence(NonTerminal('AnnotType'), NonTerminal('SimpleType'))), ZeroOrMore(NonTerminal('ClassDef')), ZeroOrMore(NonTerminal('ObjectDef')), ZeroOrMore(NonTerminal('TraitDef')), ZeroOrMore(NonTerminal('Exprs')), ZeroOrMore(NonTerminal('InfixType')), ZeroOrMore(NonTerminal('CompoundType')), ZeroOrMore(NonTerminal('Block')), ZeroOrMore(NonTerminal('Constr')), ZeroOrMore(NonTerminal('ClassTemplate')), ZeroOrMore(NonTerminal('TraitTemplate')), ZeroOrMore(NonTerminal('Generator')), ZeroOrMore(NonTerminal('TemplateBody')), ZeroOrMore(Sequence(NonTerminal('BlockStat'), NonTerminal('LocalModifier'))), ZeroOrMore(Sequence(NonTerminal('ImplicitClassParams'), NonTerminal('LocalModifier'))), ZeroOrMore(NonTerminal('InfixExpr')), ZeroOrMore(NonTerminal('Annotation')), ZeroOrMore(NonTerminal('Patterns')), ZeroOrMore(Sequence(NonTerminal('SimpleType'), NonTerminal('Annotation'))), ZeroOrMore(Sequence(NonTerminal('SimplePattern'), NonTerminal('Patterns'))), ZeroOrMore(NonTerminal('ReturnExpression')), ZeroOrMore(NonTerminal('FunSig')), ZeroOrMore(NonTerminal('TryExpression')), ZeroOrMore(Sequence(NonTerminal('Expr'), NonTerminal('SelfType'))), ZeroOrMore(NonTerminal('SelfInvocation')), ZeroOrMore(NonTerminal('Enumerators')), ZeroOrMore(Sequence(NonTerminal('SimpleExpr1'), NonTerminal('ResultExpr'))), ZeroOrMore(NonTerminal('TopStatSeq')), ZeroOrMore(NonTerminal('Refinement')))), NonTerminal('rules'), Terminal(':'), NonTerminal('SourceFile'), Choice(0, NonTerminal('CompilationUnit'), Sequence(NonTerminal('TemplateStat'), ZeroOrMore(Sequence(NonTerminal('semi'), NonTerminal('TemplateStat'))))), Optional(NonTerminal('semi')), NonTerminal('CompilationUnit'), ZeroOrMore(Sequence(NonTerminal('package'), NonTerminal('QualId'), NonTerminal('semi'))), NonTerminal('TopStatSeq'), NonTerminal('whiteSpace'), Terminal('/[\\u0020\\u0009\\u000D\\u000A]/'), NonTerminal('upperChars'), NonTerminal('p'), ZeroOrMore(NonTerminal('Lu')), NonTerminal('p'), ZeroOrMore(NonTerminal('Lt')), NonTerminal('p'), ZeroOrMore(NonTerminal('Nl')), NonTerminal('p'), ZeroOrMore(NonTerminal('Lo')), NonTerminal('p'), ZeroOrMore(NonTerminal('Lm')), NonTerminal('$'), Terminal(';'), NonTerminal('upperChars'), NonTerminal('A'), Terminal('-'), NonTerminal('Z'), NonTerminal('$'), NonTerminal('upper'), Optional(NonTerminal('$upperChars')), NonTerminal('lowerChars1'), NonTerminal('p'), ZeroOrMore(NonTerminal('Ll')), NonTerminal('_'), NonTerminal('u00AA'), NonTerminal('u00BB'), NonTerminal('u02B0'), Terminal('-'), NonTerminal('u02B8'), NonTerminal('u02C0'), Terminal('-'), NonTerminal('u02C1'), NonTerminal('u02E0'), Terminal('-'), NonTerminal('u02E4'), NonTerminal('lowerChars2'), NonTerminal('u037A'), NonTerminal('u1D78'), NonTerminal('u1D9B'), Terminal('-'), NonTerminal('u1DBF'), NonTerminal('u2071'), NonTerminal('u207F'), NonTerminal('u2090'), Terminal('-'), NonTerminal('u209C'), NonTerminal('lowerChars3'), NonTerminal('u2C7C'), Terminal('-'), NonTerminal('u2C7D'), NonTerminal('uA69C'), Terminal('-'), NonTerminal('uA69D'), NonTerminal('uA770'), NonTerminal('uA7F8'), Terminal('-'), NonTerminal('uA7F9'), NonTerminal('uAB5C'), Terminal('-'), NonTerminal('uAB5F'), NonTerminal('lowerChars'), NonTerminal('$lowerChars1$lowerChars2$lowerChars3'), Terminal(';'), NonTerminal('lowerChars'), NonTerminal('a'), Terminal('-'), NonTerminal('z_'), NonTerminal('lower'), Optional(NonTerminal('$lowerChars')), NonTerminal('letter'), NonTerminal('$upperChars$lowerChars'), NonTerminal('paren'), Optional(Sequence(Skip(), ZeroOrMore(Skip()), Optional(Skip()))), NonTerminal('opchar'), Optional(Sequence(Terminal('-'), OneOrMore(ZeroOrMore(Terminal('#'))), Terminal('/\\\\:<=>?@\\u005e\\u007c~]\n  unicodeEscape        :=  \\\\u+$hexDigit$hexDigit$hexDigit$hexDigit\n  charEscapeSeq        :=  \\\\[btnfr"\'\\\\]\n  escapeSeq            :=  ($unicodeEscape|$charEscapeSeq)\n  idrest               :=  [$(letter)0-9]*(_$opchar+)?\n  varidRegex           :=  [$(lowerChars)_]$idrest\n  [v]arid              ::= /'), NonTerminal('$varidRegex'), Terminal('/\n  boundvarid           ::= /'), Choice(0, NonTerminal('$varidRegex'), Sequence(Optional(Skip()), NonTerminal('$varidRegex'), Optional(Skip()))), Terminal('/\n  charNoBQOrNL         :=  [\\u0020-\\u005f\\u0061-\\u007f]\n  plainid              :=  ($upper$idrest|$varidRegex|$opchar+)\n  idRegex              :=  $plainid|[`]($charNoBQOrNL|$escapeSeq)*[`]\n  identifier           ::= /'), Choice(0, OneOrMore(NonTerminal('$opchar')), NonTerminal('$idRegex'), NonTerminal('$varidRegex'), Sequence(Optional(Skip()), NonTerminal('$varidRegex'), Optional(Skip()))), Terminal('/\n  decimalNumeral       :=  [0-9]+\n  hexNumeral           :=  0[xX]$hexDigit+\n  integerLiteral       ::= /'), Optional(Terminal('-')), Choice(0, NonTerminal('$decimalNumeral'), NonTerminal('$hexNumeral')), Optional(Optional(NonTerminal('Ll'))), Terminal('/\n  decimalNumeral       ::= /'), OneOrMore(Optional(Sequence(Terminal('0'), Terminal('-9')))), Terminal('/\n  hexDigit             :=  [0-9a-fA-F]\n  fpLit1               :=  $decimalNumeral[.]$decimalNumeral$exponentPart?$floatType?\n  fpLit2               :=  [.]$decimalNumeral$exponentPart?$floatType?\n  fpLit3               :=  $decimalNumeral$exponentPart?$floatType\n  fpLit4               :=  $decimalNumeral$exponentPart$floatType?\n  floatingPointLiteral ::= /'), Optional(Terminal('-')), Choice(0, NonTerminal('$fpLit1'), NonTerminal('$fpLit2'), NonTerminal('$fpLit3'), NonTerminal('$fpLit4')), Terminal('/\n  exponentPart         :=  ([Ee][+-]?$decimalNumeral)\n  floatType            :=  [FfDd]\n  booleanLiteral       ::= "true" | "false"\n  characterLiteral     ::= /'), Choice(0, Optional(Sequence(NonTerminal('u0020'), Terminal('-'), NonTerminal('u0026'), NonTerminal('u0028'), Terminal('-'), NonTerminal('u007f'))), Optional(Sequence(NonTerminal('btnfr'), Terminal("'\\\\])'/\n  rawString            ::= /"), Terminal(''), Sequence(Optional(Terminal('?')), Optional(Sequence(ZeroOrMore(Terminal('])*')), Terminal(''), Terminal('/\n  stringLiteral        ::= string | rawString\n  string               ::= /'), Optional(Choice(0, Sequence(Terminal('\\u000A]|$escapeSeq)*'), Terminal('/\n  charMinusQuoteDollar ::= [ !#\\u0025-\\u007f]\n  charMinusQuoteDollar ::= [^"\\$]\n  [i]nterpolatedString ::= alphaid \'"\' (charMinusQuoteDollar | escape)* \'"\'\n                         | alphaid \'"""\' (\'"\'? \'"\'? charMinusQuoteDollar | escape)* \'"\'? \'"""\'\n  [e]scape             ::= "$$" | "$" id | "$" BlockExpr\n  alphaid              ::= $upper $idrest | varid\n  symbolLiteral        ::= /'), Optional(Skip()), NonTerminal('$plainid'), Terminal('/\n  comment              ::= openMultiComment multiComment "*/'), Terminal(' | '), Terminal('//'), Terminal(' /.*/\n  nl                   ::= '), NonTerminal('n'), Terminal("\n  semi                 ::= (';' | _automaticSemicolon)\n  id                   ::= /$idRegex/\n\n; context free section\n  Literal              ::= integerLiteral\n                         | floatingPointLiteral\n                         | booleanLiteral\n                         | characterLiteral\n                         | stringLiteral\n                         | interpStart interpolatedString\n                         | symbolLiteral\n                         | "), NonTerminal('null'), Terminal('\n\n  QualId               ::= id ('), Terminal('.'), Terminal(' id)*\n  ids                  ::= id ('), Terminal(','), Terminal(" id)*\n\n  Path                 ::= (StableId\n                         | (id '.')? 'this')\n  StableId             ::= 5(id\n                         | Path '.' id\n                         | (id '.')? 'super' ClassQualifier? '.' id)\n  ClassQualifier       ::= "), Optional(Terminal(' id ')), Terminal('\n  ValDef               ::= '), NonTerminal('val'), Terminal(' id '), Terminal(" Literal\n\n  Type                 ::= 1(FunctionArgTypes '=>' Type | InfixType\n                             ExistentialClause?)\n  FunctionArgTypes     ::= InfixType\n                         | '(' ParamType (',' ParamType )*? ')'\n  ExistentialClause    ::= 'forSome' '{' ExistentialDcl (semi ExistentialDcl)* '}'\n  ExistentialDcl       ::= 'type' TypeDcl\n                         | 'val' ValDcl\n  InfixType            ::= CompoundType (id nl? CompoundType)*\n  CompoundType         ::= AnnotType ('with' AnnotType)* Refinement? | Refinement\n  AnnotType            ::= SimpleType Annotation*\n  SimpleType           ::= SimpleType TypeArgs\n                         | SimpleType '#' id\n                         | StableId\n                         | Path '.' 'type'\n                         | '(' Types ')'\n  TypeArgs             ::= '[' Types ']'\n  Types                ::= 1(Type (',' Type)*)\n  Refinement           ::= nl? '{' RefineStat? (semi RefineStat)* '}'\n  RefineStat           ::= Dcl\n                         | 'type' TypeDef\n  TypePat              ::= Type\n\n  Ascription           ::= 1(':' InfixType\n                         | ':' Annotation Annotation*\n                         | ':' '_' '*')\n\n  IfExpression         ::= ('if' '(' Expr ')' nl* Expr (semi? 'else' Expr)?)\n  WhileExpression      ::= 'while' '(' Expr ')' nl* Expr\n  TryExpression        ::= ('try' Expr ('catch' Expr)? ('finally' Expr)?)\n  DoExpression         ::= ('do' Expr semi? 'while' '(' Expr ')')\n  ThrowExpression      ::= 'throw' Expr\n  ReturnExpression     ::= ('return' Expr?)\n  ForExpression        ::= 'for' ('(' Enumerators ')' | '{' Enumerators semi? '}') nl* 'yield'? Expr\n  CaseExpression       ::= PostfixExpr 'match' '{' CaseClauses '}'\n  Expr                 ::= 1((Bindings | 'implicit'? id | '_') '=>' Expr | Expr1)\n  Expr1                ::= 1(IfExpression\n                         | WhileExpression\n                         | TryExpression\n                         | DoExpression\n                         | ThrowExpression\n                         | ReturnExpression\n                         | ForExpression\n                         | PostfixExpr\n                         | PostfixExpr Ascription\n                         | CaseExpression)\n  PostfixExpr          ::= -1(InfixExpr (id nl?)?)\n  InfixExpr            ::= <((PrefixExpr | InfixExpr id nl? InfixExpr))\n  PrefixExpr           ::= ('-' | '+' | '~' | '!')? SimpleExpr\n  SimpleExpr           ::= 'new' (ClassTemplate | TemplateBody)\n                         | BlockExpr\n                         | SimpleExpr1 '_'?\n  SimpleExpr1          ::= 10(Literal\n                         | Path\n                         | '_'\n                         | '(' Exprs? ')'\n                         | SimpleExpr '.' id\n                         | SimpleExpr TypeArgs\n                         | SimpleExpr1 ArgumentExprs)\n  Exprs                ::= Expr (',' Expr)*\n  ArgumentExprs        ::= '(' Exprs? ')'\n                         | '(' (Exprs ',')? PostfixExpr ':' '_' '*' ')'\n                         | nl? BlockExpr\n  BlockExpr            ::= '{' CaseClauses '}'\n                         | '{' nl* Block '}'\n  Block                ::= BlockStat (semi BlockStat)* ResultExpr?\n  BlockStat            ::= Import\n                         | Annotation* 'implicit'? 'lazy'? Def\n                         | Annotation* LocalModifier* TmplDef\n                         | Expr1\n                         | empty\n  ResultExpr           ::= -10(Expr1\n                         | (Bindings | ('implicit'? id | '_') ':'\n                             CompoundType) '=>' Block)\n\n  Enumerators          ::= Generator (semi Generator)*\n  Generator            ::= Pattern1 '<-' Expr (semi? Guard | semi Pattern1 '=' Expr)*\n\n  CaseClauses          ::= CaseClause (semi? CaseClause)*\n  CaseClause           ::= "), NonTerminal('case'), Terminal(' Pattern Guard? '), Terminal(" Block\n  Guard                ::= 'if' PostfixExpr\n\n  Pattern              ::= Pattern1 ('|' Pattern1)*\n  Pattern1             ::= boundvarid ':' TypePat\n                         | '_' ':' TypePat\n                         | Pattern2\n  Pattern2             ::= 10(id ('@' Pattern3)?\n                         | Pattern3)\n  Pattern3             ::= SimplePattern\n                         | SimplePattern (id nl? SimplePattern)*\n  SimplePattern        ::= ('_'\n                         | varid\n                         | Literal\n                         | StableId\n                         | StableId '(' Patterns? ')'\n                         | StableId '(' (Patterns ',')? (id '@')? '_' '*' ')'\n                         | '(' Patterns? ')')\n  Patterns             ::= (Pattern (',' Patterns)?\n                         | '_' '*')\n\n  TypeParamClause      ::= '[' VariantTypeParam (',' VariantTypeParam)* ']'\n  FunTypeParamClause   ::= '[' TypeParam (',' TypeParam)* ']'\n  VariantTypeParam     ::= Annotation* ('+' | '-')? TypeParam\n  TypeParam            ::= (id | '_') TypeParamClause? ('>:' Type)? ('<:' Type)?\n                             ('<%' Type)* (':' Type)*\n  ParamClauses         :=  ParamClause* (nl? '(' 'implicit' Params ')')?\n  ParamClause          ::= nl? '(' Params? ')'\n  Params               ::= Param (',' Param)* trailingComma?\n  Param                ::= Annotation* id (':' ParamType)? ('=' Expr)?\n  ParamType            ::= (Type | '=>' Type |  Type '*')\n  ImplicitClassParams  ::= '(' 'implicit' ClassParams ')'\n  ClassParamClauses    :=  <10(ClassParamClause* (nl? ImplicitClassParams?))\n  ClassParamClause     ::= (nl? '(' ClassParams? ')')\n  ClassParams          ::= ClassParam (',' ClassParam)*\n  ClassParam           ::= Annotation* Modifier* (('val' | 'var'))?\n                             id ':' ParamType ('=' Expr)?\n  Bindings             ::= '(' Binding (',' Binding)* ')'\n  Binding              ::= (id | "), NonTerminal('_'), Terminal(')'), Optional(Sequence(Terminal(':'), NonTerminal('Type'))), NonTerminal('Modifier'), Choice(0, NonTerminal('LocalModifier'), NonTerminal('AccessModifier'), NonTerminal('override')), NonTerminal('LocalModifier'), Choice(0, NonTerminal('abstract'), NonTerminal('final'), NonTerminal('sealed'), NonTerminal('implicit'), NonTerminal('lazy')), NonTerminal('AccessModifier'), Choice(0, NonTerminal('private'), NonTerminal('protected')), Optional(NonTerminal('AccessQualifier')), NonTerminal('AccessQualifier'), Optional(Choice(0, NonTerminal('id'), NonTerminal('this'))), NonTerminal('Annotation'), Sequence(Terminal('@'), NonTerminal('SimpleType'), ZeroOrMore(NonTerminal('ArgumentExprs'))), NonTerminal('ConstrAnnotation'), Terminal('@'), NonTerminal('SimpleType'), NonTerminal('ArgumentExprs'), NonTerminal('TemplateBody'), Terminal('1'), Sequence(Optional(NonTerminal('nl')), ZeroOrMore(Sequence(Optional(NonTerminal('SelfType')), NonTerminal('TemplateStat'), ZeroOrMore(Sequence(NonTerminal('semi'), NonTerminal('TemplateStat')))))), NonTerminal('TemplateStat'), Terminal('1'), Choice(0, NonTerminal('Import'), Sequence(ZeroOrMore(Sequence(NonTerminal('Annotation'), Optional(NonTerminal('nl')))), ZeroOrMore(NonTerminal('Modifier')), NonTerminal('Def')), Sequence(ZeroOrMore(Sequence(NonTerminal('Annotation'), Optional(NonTerminal('nl')))), ZeroOrMore(NonTerminal('Modifier')), NonTerminal('Dcl')), NonTerminal('Expr'), NonTerminal('empty')), Terminal(';'), NonTerminal('TODO'), NonTerminal('not'), NonTerminal('sure'), NonTerminal('about'), NonTerminal('associativity'), NonTerminal('SelfType'), Choice(0, Sequence(NonTerminal('id'), Optional(Sequence(Terminal(':'), NonTerminal('Type')))), Sequence(NonTerminal('this'), Terminal(':'), NonTerminal('Type'))), NonTerminal('Import'), NonTerminal('import'), NonTerminal('ImportExpr'), ZeroOrMore(Sequence(Terminal(','), NonTerminal('ImportExpr'))), NonTerminal('ImportExpr'), Sequence(NonTerminal('StableId'), Terminal('.'), Choice(0, NonTerminal('id'), NonTerminal('_'), NonTerminal('ImportSelectors'))), NonTerminal('ImportSelectors'), ZeroOrMore(Sequence(ZeroOrMore(Sequence(NonTerminal('ImportSelector'), Terminal(','))), Choice(0, NonTerminal('ImportSelector'), NonTerminal('_')))), NonTerminal('ImportSelector'), NonTerminal('id'), Optional(Choice(0, NonTerminal('id'), NonTerminal('_'))), Terminal(';'), NonTerminal('val'), NonTerminal('var'), NonTerminal('and'), NonTerminal('def'), NonTerminal('below'), NonTerminal('are'), NonTerminal('a'), NonTerminal('hack'), NonTerminal('because'), NonTerminal('tree'), Terminal('-'), NonTerminal('sitter'), NonTerminal('seems'), NonTerminal('unable'), NonTerminal('to'), Terminal(';'), NonTerminal('disambiguate'), NonTerminal('the'), NonTerminal('conflict'), NonTerminal('between'), NonTerminal('Dcl'), NonTerminal('and'), NonTerminal('Def'), NonTerminal('and'), NonTerminal('always'), NonTerminal('errs'), NonTerminal('out'), NonTerminal('on'), NonTerminal('dcls'), NonTerminal('Dcl'), Choice(0, Sequence(NonTerminal('val'), NonTerminal('ValDcl')), Sequence(NonTerminal('var'), NonTerminal('VarDcl')), Sequence(NonTerminal('def1'), NonTerminal('FunDcl')), Sequence(NonTerminal('type'), ZeroOrMore(NonTerminal('nl')), NonTerminal('TypeDcl'))), NonTerminal('ValDcl'), NonTerminal('ids'), Terminal(':'), NonTerminal('Type'), NonTerminal('VarDcl'), NonTerminal('ids'), Terminal(':'), NonTerminal('Type'), NonTerminal('FunDcl'), NonTerminal('FunSig'), Optional(Sequence(Terminal(':'), NonTerminal('Type'))), Terminal(';'), NonTerminal('TODO'), NonTerminal('not'), NonTerminal('sure'), NonTerminal('about'), NonTerminal('right'), NonTerminal('associativity'), NonTerminal('FunSig'), Sequence(NonTerminal('id'), Optional(NonTerminal('FunTypeParamClause')), NonTerminal('$ParamClauses')), NonTerminal('TypeDcl'), NonTerminal('id'), Optional(NonTerminal('TypeParamClause')), Optional(Sequence(Terminal('>'), Terminal(':'), NonTerminal('Type'))), Optional(Sequence(Terminal('<'), Terminal(':'), NonTerminal('Type'))), NonTerminal('PatVarDef'), NonTerminal('val'), NonTerminal('PatDef')), Sequence(NonTerminal('var'), NonTerminal('VarDef'), NonTerminal('Def'), Terminal('1'), Choice(0, NonTerminal('PatVarDef'), Sequence(NonTerminal('def'), NonTerminal('FunDef')), Sequence(NonTerminal('type'), ZeroOrMore(NonTerminal('nl')), NonTerminal('TypeDef')), NonTerminal('TmplDef')), NonTerminal('PatDef'), NonTerminal('Pattern2'), Optional(Sequence(Terminal(':'), NonTerminal('Type'))), NonTerminal('Expr'), NonTerminal('VarDef'), NonTerminal('PatDef')), Sequence(NonTerminal('ids'), Terminal(':'), NonTerminal('Type'), NonTerminal('_'), NonTerminal('FunDef'), NonTerminal('FunSig'), Optional(Sequence(Terminal(':'), NonTerminal('Type'))), NonTerminal('Expr')), Sequence(NonTerminal('FunSig'), Optional(NonTerminal('nl')), ZeroOrMore(NonTerminal('Block'))), Sequence(NonTerminal('this'), NonTerminal('ParamClause'), NonTerminal('$ParamClauses'), Choice(0, NonTerminal('ConstrExpr'), Sequence(Optional(NonTerminal('nl')), NonTerminal('ConstrBlock'))), NonTerminal('TypeDef'), NonTerminal('id'), Optional(NonTerminal('TypeParamClause')), NonTerminal('Type'), NonTerminal('TmplDef'), Optional(NonTerminal('case')), NonTerminal('class'), NonTerminal('ClassDef')), Sequence(Optional(NonTerminal('case')), NonTerminal('object'), NonTerminal('ObjectDef')), Sequence(NonTerminal('trait'), NonTerminal('TraitDef'), NonTerminal('ClassDef'), NonTerminal('id'), Optional(NonTerminal('TypeParamClause')), ZeroOrMore(NonTerminal('ConstrAnnotation')), Optional(NonTerminal('AccessModifier')), NonTerminal('$ClassParamClauses'), NonTerminal('$ClassTemplateOpt'), NonTerminal('TraitDef'), NonTerminal('id'), Optional(NonTerminal('TypeParamClause')), NonTerminal('$TraitTemplateOpt'), NonTerminal('ObjectDef'), NonTerminal('id'), NonTerminal('$ClassTemplateOpt'), Terminal(';'), NonTerminal('These'), NonTerminal('have'), NonTerminal('to'), NonTerminal('be'), NonTerminal('constants'), NonTerminal('because'), NonTerminal('tree'), Terminal('-'), NonTerminal('sitter'), NonTerminal('does'), NonTerminal('not'), NonTerminal('allow'), NonTerminal('rules'), NonTerminal('that'), NonTerminal('match'), NonTerminal('the'), NonTerminal('empty'), NonTerminal('string'), NonTerminal('ClassTemplateOpt'), NonTerminal('extends'), NonTerminal('ClassTemplate')), Sequence(Optional(Sequence(Optional(NonTerminal('extends')), NonTerminal('TemplateBody'))), NonTerminal('TraitTemplateOpt'), NonTerminal('extends'), NonTerminal('TraitTemplate')), Sequence(Optional(Sequence(Optional(NonTerminal('extends')), NonTerminal('TemplateBody'))), Terminal(';'), NonTerminal('TODO'), NonTerminal('not'), NonTerminal('sure'), NonTerminal('about'), NonTerminal('right'), NonTerminal('associativity'), NonTerminal('ClassTemplate'), Terminal('-1'), Sequence(Optional(NonTerminal('EarlyDefs')), NonTerminal('ClassParents'), Optional(NonTerminal('TemplateBody'))), NonTerminal('TraitTemplate'), Terminal('-1'), Sequence(Optional(NonTerminal('EarlyDefs')), NonTerminal('TraitParents'), Optional(NonTerminal('TemplateBody'))), NonTerminal('ClassParents'), NonTerminal('Constr'), ZeroOrMore(Sequence(NonTerminal('with'), NonTerminal('AnnotType'))), NonTerminal('TraitParents'), NonTerminal('AnnotType'), ZeroOrMore(Sequence(NonTerminal('with'), NonTerminal('AnnotType'))), NonTerminal('Constr'), NonTerminal('AnnotType'), ZeroOrMore(NonTerminal('ArgumentExprs')), NonTerminal('EarlyDefs'), ZeroOrMore(Optional(Sequence(NonTerminal('EarlyDef'), ZeroOrMore(Sequence(NonTerminal('semi'), NonTerminal('EarlyDef')))))), NonTerminal('with'), NonTerminal('EarlyDef'), Terminal('1'), Sequence(ZeroOrMore(Sequence(NonTerminal('Annotation'), Optional(NonTerminal('nl')))), ZeroOrMore(NonTerminal('Modifier')), NonTerminal('PatVarDef')), NonTerminal('ConstrExpr'), NonTerminal('SelfInvocation')), Sequence(NonTerminal('ConstrBlock'), NonTerminal('ConstrBlock'), ZeroOrMore(Sequence(NonTerminal('SelfInvocation'), ZeroOrMore(Sequence(NonTerminal('semi'), NonTerminal('BlockStat'))), Optional(NonTerminal('empty')))), Terminal(';'), NonTerminal('TODO'), NonTerminal('right'), NonTerminal('associativity'), NonTerminal('SelfInvocation'), NonTerminal('this'), NonTerminal('ArgumentExprs'), ZeroOrMore(NonTerminal('ArgumentExprs')), NonTerminal('TopStatSeq'), NonTerminal('TopStat'), ZeroOrMore(Sequence(NonTerminal('semi'), NonTerminal('TopStat'))), NonTerminal('TopStat'), ZeroOrMore(Sequence(NonTerminal('Annotation'), Optional(NonTerminal('nl')))), ZeroOrMore(NonTerminal('Modifier')), NonTerminal('TmplDef')), NonTerminal('Import'), NonTerminal('Packaging'), Sequence(NonTerminal('PackageObject'), NonTerminal('Packaging'), NonTerminal('package'), NonTerminal('QualId'), Optional(NonTerminal('nl')), ZeroOrMore(NonTerminal('TopStatSeq')), NonTerminal('PackageObject'), NonTerminal('package'), NonTerminal('object'), NonTerminal('ObjectDef'))))))))))))))
with open('externals.svg', 'w', encoding='utf-8') as f:
    print("output")
    externals_diagram.writeStandalone(f.write)
